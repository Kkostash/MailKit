{"name":"MailKit","tagline":"A cross-platform .NET mail client library.","body":"# MailKit\r\n\r\n## What is MailKit?\r\n\r\nMailKit is a cross-platform mail client library built on top of [MimeKit](https://github.com/jstedfast/MimeKit).\r\n\r\n## Features\r\n\r\n* SASL Authentication\r\n  * CRAM-MD5\r\n  * DIGEST-MD5\r\n  * LOGIN\r\n  * NTLM\r\n  * PLAIN\r\n  * XOAUTH2 (partial support - you need to fetch the auth tokens yourself)\r\n* SMTP Client\r\n  * Supports all of the SASL mechanisms listed above.\r\n  * Supports SSL-wrapped connections via the \"smtps\" protocol.\r\n  * Supports the STARTTLS extension.\r\n  * Supports client SSL/TLS certificates.\r\n  * Supports the 8BITMIME and BINARYMIME extensions.\r\n  * Supports the PIPELINING extension.\r\n  * Parses the SIZE extension value.\r\n  * All APIs are cancellable.\r\n  * Async APIs are available.\r\n* POP3 Client\r\n  * Supports all of the SASL mechanisms listed above.\r\n  * Also supports authentication via APOP and USER/PASS.\r\n  * Supports SSL-wrapped connections via the \"pops\" protocol.\r\n  * Supports the STLS extension.\r\n  * Supports client SSL/TLS certificates.\r\n  * Supports the UIDL command.\r\n  * All APIs are cancellable.\r\n  * Async APIs are available.\r\n* IMAP4 Client\r\n  * Supports all of the SASL mechanisms listed above.\r\n  * Supports SSL-wrapped connections via the \"imaps\" protocol.\r\n  * Supports client SSL/TLS certificates.\r\n  * Supports the following extensions:\r\n    * LITERAL+\r\n    * IDLE\r\n    * NAMESPACE\r\n    * CHILDREN\r\n    * LOGINDISABLED\r\n    * STARTTLS\r\n    * MULTIAPPEND\r\n    * UNSELECT\r\n    * UIDPLUS\r\n    * CONDSTORE\r\n    * ESEARCH\r\n    * SASL-IR\r\n    * COMPRESS\r\n    * ENABLE\r\n    * QRESYNC\r\n    * SORT\r\n    * THREAD\r\n    * ESORT (partial)\r\n    * SPECIAL-USE\r\n    * MOVE\r\n    * XLIST\r\n    * X-GM-EXT1 (X-GM-MSGID, X-GM-THRID, X-GM-RAW and X-GM-LABELS)\r\n  * All APIs are cancellable.\r\n  * Async APIs are available.\r\n* Client-side sorting and threading of messages.\r\n\r\n## TODO\r\n\r\n* SASL Authentication\r\n  * Improve XOAUTH2\r\n  * ANONYMOUS\r\n  * GSSAPI\r\n  * SCRAM-SHA-1\r\n  * SCRAM-*\r\n* SMTP Client\r\n  * CHUNKING (hmmm, doesn't really seem all that useful...)\r\n  * Throw an exception if the MimeMessage is larger than the SIZE value?\r\n* POP3 Client\r\n  * PIPELINING\r\n* IMAP4 Client\r\n  * Extensions:\r\n    * QUOTA\r\n    * BINARY\r\n    * CATENATE\r\n    * LIST-EXTENDED\r\n    * CONVERT\r\n    * METADATA\r\n    * NOTIFY\r\n    * FILTERS\r\n    * LIST-STATUS\r\n    * MULTISEARCH\r\n* Maildir\r\n* Thunderbird mbox folder trees\r\n\r\n## Goals\r\n\r\nThe main goal of this project is to optimize for mobile platforms such as Android, iOS, and eventually Windows Phone 8.\r\nThis means that IMAP extensions such as CONDSTORE, QRESYNC, and any other extensions that allow clients to reduce\r\nnetwork traffic (IDLE? ESEARCH? COMPRESS?) will take priority over any of the other extensions. After that, the most\r\ncommon extensions will take precedence over the lesser-used extensions until finally all of the extensions anyone\r\nactually cares about are implemented.\r\n\r\nAt some point in the (near?) future, I'd also like to start using async/await. For those who are stuck in .NET 4.0,\r\nMicrosoft has released an\r\n[Async Targetting Pack](http://blogs.msdn.com/b/bclteam/archive/2013/04/17/microsoft-bcl-async-is-now-stable.aspx)\r\non [NuGet](https://nuget.org/packages/Microsoft.Bcl.Async) which allows the use of the async/await keywords on\r\npre-.NET 4.5 platforms. If you haven't already, I'd highly recommend installing it.\r\n\r\n## License Information\r\n\r\nMailKit is Copyright (C) 2013-2014 Xamarin Inc. and is licensed under the MIT license:\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    THE SOFTWARE.\r\n\r\n## Installing via NuGet\r\n\r\nThe easiest way to install MailKit is via [NuGet](https://www.nuget.org/packages/MailKit/).\r\n\r\nIn Visual Studio's [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console),\r\nsimply enter the following command:\r\n\r\n    Install-Package MailKit\r\n\r\n## Building\r\n\r\nFirst, you'll need to clone MailKit, MimeKit, Bouncy Castle, and Portable.Text.Encoding from my GitHub repository:\r\n\r\n    git clone https://github.com/jstedfast/MailKit.git\r\n    git clone https://github.com/jstedfast/MimeKit.git\r\n    git clone https://github.com/jstedfast/bc-csharp.git\r\n    git clone https://github.com/jstedfast/Portable.Text.Encoding.git\r\n\r\nCurrently, MailKit (through its use of MimeKit) depends on the visual-studio-2010 branch of bc-csharp for\r\nthe Visual Studio 2010 project files that I've added (to replace the Visual Studio 2003 project files).\r\nTo switch to that branch,\r\n\r\n    cd bc-csharp\r\n    git checkout -b visual-studio-2010 origin/visual-studio-2010\r\n\r\nIn the top-level MailKit source directory, there are three solution files: MailKit.sln, MailKit.Net40.sln and MailKit.Mobile.sln.\r\n\r\n* MailKit.sln includes the projects for .NET 4.5, .NET 4.0, Xamarin.Android, and Xamarin.iOS.\r\n* MailKit.Net40.sln just includes the .NET Framework 4.0 C# project (MailKit/MailKit.Net40.csproj)\r\n* MailKit.Mobile.sln just includes the Xamarin.iOS and Xamarin.Android projects.\r\n* MailKit.Win.sln just includes the Windows 8.1 Universal project (aka wpa81).\r\n\r\nIf you don't have the Xamarin products, you'll probably want to open the MailKit.Net45.sln instead of MailKit.sln.\r\n\r\nOnce you've opened the appropriate MailKit solution file in either Xamarin Studio or Visual Studio 2010+ (either will work),\r\nyou can simply choose the Debug or Release build configuration and then build.\r\n\r\nNote: The Release build will generate the xml API documentation, but the Debug build will not.\r\n\r\n## Using MailKit\r\n\r\n### Sending Messages\r\n\r\nOne of the more common operations that MailKit is meant for is sending email messages.\r\n\r\n```csharp\r\nusing System;\r\n\r\nusing MailKit.Net.Smtp;\r\nusing MailKit;\r\nusing MimeKit;\r\n\r\nnamespace TestClient {\r\n\tclass Program\r\n\t{\r\n\t\tpublic static void Main (string[] args)\r\n\t\t{\r\n\t\t\tvar message = new MimeMessage ();\r\n\t\t\tmessage.From.Add (new MailboxAddress (\"Joey Tribbiani\", \"joey@friends.com\"));\r\n\t\t\tmessage.To.Add (new MailboxAddress (\"Mrs. Chanandler Bong\", \"chandler@friends.com\"));\r\n\t\t\tmessage.Subject = \"How you doin'?\";\r\n\r\n\t\t\tmessage.Body = new TextPart (\"plain\") {\r\n\t\t\t\tText = @\"Hey Chandler,\r\n\r\nI just wanted to let you know that Monica and I were going to go play some paintball, you in?\r\n\r\n-- Joey\"\r\n\t\t\t};\r\n\r\n\t\t\tusing (var client = new SmtpClient ()) {\r\n\t\t\t\tclient.Connect (\"smtp.friends.com\", 587, false);\r\n\r\n\t\t\t\t// Note: since we don't have an OAuth2 token, disable\r\n\t\t\t\t// the XOAUTH2 authentication mechanism.\r\n\t\t\t\tclient.AuthenticationMechanisms.Remove (\"XOAUTH2\");\r\n\r\n\t\t\t\t// Note: only needed if the SMTP server requires authentication\r\n\t\t\t\tclient.Authenticate (\"joey\", \"password\");\r\n\r\n\t\t\t\tclient.Send (message);\r\n\t\t\t\tclient.Disconnect (true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## Retrieving Messages (via Pop3)\r\n\r\nOne of the other main uses of MailKit is retrieving messages from pop3 servers.\r\n\r\n```csharp\r\nusing System;\r\n\r\nusing MailKit.Net.Pop3;\r\nusing MailKit;\r\nusing MimeKit;\r\n\r\nnamespace TestClient {\r\n\tclass Program\r\n\t{\r\n\t\tpublic static void Main (string[] args)\r\n\t\t{\r\n\t\t\tusing (var client = new Pop3Client ()) {\r\n\t\t\t\tclient.Connect (\"pop.friends.com\", 110, false);\r\n\r\n\t\t\t\t// Note: since we don't have an OAuth2 token, disable\r\n\t\t\t\t// the XOAUTH2 authentication mechanism.\r\n\t\t\t\tclient.AuthenticationMechanisms.Remove (\"XOAUTH2\");\r\n\r\n\t\t\t\tclient.Authenticate (\"joey\", \"password\");\r\n\r\n\t\t\t\tint count = client.GetMessageCount ();\r\n\t\t\t\tfor (int i = 0; i < count; i++) {\r\n\t\t\t\t\tvar message = client.GetMessage (i);\r\n\t\t\t\t\tConsole.WriteLine (\"Subject: {0}\", message.Subject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclient.Disconnect (true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n## Using IMAP\r\n\r\nMore important than POP3 support is the IMAP support. Here's a simple use-case of retreiving messages from an IMAP server:\r\n\r\n```csharp\r\nusing System;\r\n\r\nusing MailKit.Net.Imap;\r\nusing MailKit.Search;\r\nusing MailKit;\r\nusing MimeKit;\r\n\r\nnamespace TestClient {\r\n\tclass Program\r\n\t{\r\n\t\tpublic static void Main (string[] args)\r\n\t\t{\r\n\t\t\tusing (var client = new ImapClient ()) {\r\n\t\t\t\tclient.Connect (\"imap.friends.com\", 995, true);\r\n\r\n\t\t\t\t// Note: since we don't have an OAuth2 token, disable\r\n\t\t\t\t// the XOAUTH2 authentication mechanism.\r\n\t\t\t\tclient.AuthenticationMechanisms.Remove (\"XOAUTH\");\r\n\r\n\t\t\t\tclient.Authenticate (\"joey\", \"password\");\r\n\r\n\t\t\t\t// The Inbox folder is always available on all IMAP servers...\r\n\t\t\t\tvar inbox = client.Inbox;\r\n\t\t\t\tinbox.Open (FolderAccess.ReadOnly);\r\n\r\n\t\t\t\tConsole.WriteLine (\"Total messages: {0}\", inbox.Count);\r\n\t\t\t\tConsole.WriteLine (\"Recent messages: {0}\", inbox.Recent);\r\n\r\n\t\t\t\tfor (int i = 0; i < inbox.Count; i++) {\r\n\t\t\t\t\tvar message = inbox.GetMessage (i);\r\n\t\t\t\t\tConsole.WriteLine (\"Subject: {0}\", message.Subject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclient.Disconnect (true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nHowever, you probably want to do more complicated things with IMAP such as fetching summary information\r\nso that you can display a list of messages in a mail client without having to first download all of the\r\nmessages from the server:\r\n\r\n```csharp\r\nforeach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Full | MessageSummaryItems.UniqueId)) {\r\n\tConsole.WriteLine (\"[summary] {0:D2}: {1}\", summary.Index, summary.Envelope.Subject);\r\n}\r\n```\r\n\r\nThe results of a Fetch command can also be used to download individual MIME parts rather\r\nthan downloading the entire message. For example:\r\n\r\n```csharp\r\nforeach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Full | MessageSummaryItems.UniqueId)) {\r\n\tvar text = summary.Body as BodyPartText;\r\n\r\n\tif (text == null) {\r\n\t\tvar multipart = summary.Body as BodyPartMultipart;\r\n\r\n\t\tif (multipart != null)\r\n\t\t\ttext = multipart.BodyParts.OfType<BodyPartText> ().FirstOrDefault ();\r\n\t}\r\n\r\n\tif (text == null)\r\n\t\tcontinue;\r\n\r\n\t// this will download *just* the text part\r\n\tvar part = inbox.GetBodyPart (summary.UniqueId.Value, text);\r\n}\r\n```\r\n\r\nYou may also be interested in sorting and searching...\r\n\r\n```csharp\r\n// let's search for all messages received after Jan 12, 2013 with \"MailKit\" in the subject...\r\nvar query = SearchQuery.DeliveredAfter (DateTime.Parse (\"2013-01-12\"))\r\n    .And (SearchQuery.SubjectContains (\"MailKit\")).And (SearchQuery.Seen);\r\n\r\nforeach (var uid in inbox.Search (query)) {\r\n\tvar message = inbox.GetMessage (uid);\r\n\tConsole.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\r\n}\r\n\r\n// let's do the same search, but this time sort them in reverse arrival order\r\nvar orderBy = new [] { OrderBy.ReverseArrival };\r\nforeach (var uid in inbox.Search (query, orderBy)) {\r\n\tvar message = inbox.GetMessage (uid);\r\n\tConsole.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\r\n}\r\n\r\n// you'll notice that the orderBy argument is an array... this is because you\r\n// can actually sort the search results based on multiple columns:\r\norderBy = new [] { OrderBy.ReverseArrival, OrderBy.Subject };\r\nforeach (var uid in inbox.Search (query, orderBy)) {\r\n\tvar message = inbox.GetMessage (uid);\r\n\tConsole.WriteLine (\"[match] {0}: {1}\", uid, message.Subject);\r\n}\r\n```\r\n\r\nOf course, instead of downloading the message, you could also fetch the summary information for the matching messages\r\nor do any of a number of other things with the UIDs that are returned.\r\n\r\nHow about navigating folders? MailKit can do that, too:\r\n\r\n```csharp\r\n// Get the first personal namespace and list the toplevel folders under it.\r\nvar personal = client.GetFolder (client.PersonalNamespaces[0]);\r\nforeach (var folder in personal.GetSubfolders (false))\r\n\tConsole.WriteLine (\"[folder] {0}\", folder.Name);\r\n```\r\n\r\nIf the IMAP server supports the SPECIAL-USE or the XLIST (GMail) extension, you can get ahold of\r\nthe pre-defined All, Drafts, Flagged (aka Important), Junk, Sent, Trash, etc folders like this:\r\n\r\n```csharp\r\nif ((client.Capabilities & (ImapCapabilities.SpecialUse | ImapCapabilities.XList)) != 0) {\r\n\tvar drafts = client.GetFolder (SpecialFolder.Drafts);\r\n} else {\r\n\t// maybe check the user's preferences for the Drafts folder?\r\n}\r\n```\r\n\r\nIn cases where the IMAP server does *not* support the SPECIAL-USE or XLIST extensions, you'll have to\r\ncome up with your own heuristics for getting the Sent, Drafts, Trash, etc folders. For example, you\r\nmight use logic similar to this:\r\n\r\n```csharp\r\nstatic string[] CommonSentFolderNames = { \"Sent Items\", \"Sent Mail\", /* maybe add some translated names */ };\r\n\r\nstatic IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)\r\n{\r\n    var personal = client.GetFolder (client.PersonalNamespaces[0]);\r\n\r\n    foreach (var folder in personal.GetSubfolders (false, cancellationToken)) {\r\n        foreach (var name in CommonSentFolderNames) {\r\n            if (folder.Name == commonName)\r\n                return folder;\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n```\r\n\r\nUsing LINQ, you could simplify this down to something more like this:\r\n\r\n```csharp\r\nstatic string[] CommonSentFolderNames = { \"Sent Items\", \"Sent Mail\", /* maybe add some translated names */ };\r\n\r\nstatic IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)\r\n{\r\n    var personal = client.GetFolder (client.PersonalNamespaces[0]);\r\n    \r\n    return personal.GetSubfolders (false, cancellationToken).FirstOrDefault (x => CommonSentFolderNames.Contains (x.Name));\r\n}\r\n```\r\n\r\nAnother option might be to allow the user of your application to configure which folder he or she wants to use as their Sent folder, Drafts folder, Trash folder, etc.\r\n\r\nHow you handle this is up to you.\r\n\r\n## Contributing\r\n\r\nThe first thing you'll need to do is fork MailKit to your own GitHub repository. Once you do that,\r\n\r\n    git clone git@github.com/<your-account>/MailKit.git\r\n\r\nIf you use [Xamarin Studio](http://xamarin.com/studio) or [MonoDevelop](http://monodevelop.org), all of the\r\nsolution files are configured with the coding style used by MailKit. If you use Visual Studio or some\r\nother editor, please try to maintain the existing coding style as best as you can.\r\n\r\nOnce you've got some changes that you'd like to submit upstream to the official MailKit repository,\r\nsimply send me a Pull Request and I will try to review your changes in a timely manner.\r\n\r\n## Reporting Bugs\r\n\r\nHave a bug or a feature request? [Please open a new issue](https://github.com/jstedfast/MailKit/issues).\r\n\r\nBefore opening a new issue, please search for existing issues to avoid submitting duplicates.\r\n\r\n## Documentation\r\n\r\nAPI documentation can be found at [http://jstedfast.github.io/MailKit/docs](http://jstedfast.github.io/MailKit/docs).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}